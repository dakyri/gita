/*
 * StrokeGroup.java
 *
 * Created on 8 March 2005, 13:32
 */

package gita;
 
import java.util.LinkedList;
import java.util.Collection;
import java.util.Iterator;
import java.lang.UnsupportedOperationException;

import zone.HTMLwriter;

/**
 * Class referencing group of strokes. Typically, <i>Stroke</i>s are maintained in a <i>PageData</i>
 * structure, to which the list kept here is references, not copies. Thus the stroke groups are non-exclusive
 * and non hierarchical.
 * <p>
 * When the page is stored as SVG data, the stroke group information is reflected as
 * SVG groups, which are hierarchically arranged. Hopefully this won't cause too many issues.
 *<p>
 * Meanings are assigned to groups of strokes via Symbol structures, which have their own infrastructure
 * for grouping strokes. The StrokeGroup class is not intended to be used in that context.
 * <p>
 * The main purpose for these groups is for grouping items of signature data. These are
 * processed by a different subsystem to the main parsing and interpretation engine, and require
 * very different calculations individually, and as a group.
 *
 * @see PageData
 * @see Stroke
 * @see StrokeGroupInfo
 * @author dak
 * @since you asked
 */
public class StrokeGroup implements Collection<Stroke>
{
    
    /**
     * the possible types of a StrokeGroup. This is used to indicate which particular
     * StrokeGroupInfo structure to allocate
     */
    public enum Type {
     /** a group of strokes in a signature used for training data */   SignatureTraining,
     /** a group of strokes in a signature used for verification in a document */   Signature,
     /** a non-specific stroke group */   Vanilla
    }
    
    /**
     * a new blank instance of StrokeGroup
     */
    public StrokeGroup()
    {
        init(Type.Vanilla, null);
    }

    /**
     * a new StrokeGroup of the given type
     */
    public StrokeGroup(Type gt)
    {
        init(gt, null);
    }
    
    /**
     * a new StrokeGroup of the given type and name
     */
    public StrokeGroup(Type gt, String nm)
    {
        init(gt, nm);
    }
    
    /**
     * initialise a new StrokeGroup of the given type and name
     * @param gt the type of the group
     * @param nm the name of the group
     */
    public void init(Type gt, String nm)
    {
        nStrokes = 0;
        id = nm;
        strokes = new LinkedList();
        type = gt;
        
    }

    /**
     * adds all strokes in a LinkedList that are enclosed by the bounding box of the given
     * enclosing stroke.
     *
     * @param strokes the list of strokes to add from
     * @param enclosingStroke the stroke which will enclose strokes of interest
     */
    public void AppendEnclosedStrokes(Stroke enclosingStroke, LinkedList<Stroke> strokes)
    {
        for (Stroke sj: strokes) {
            if (sj != enclosingStroke) {
                boolean intrsx = enclosingStroke.bounds.Intersects(sj.bounds);
                if (intrsx) {
                    switch (type) {
                        case SignatureTraining:
                        case Signature: {
                            sj.info = new SignatureStroke(sj);
                            break;
                        }
                        case Vanilla: {
                            break;
                        }
                    }
                    add(sj); 
                }
            }
        }
    }
    
    /**
     * returns the i-th stroke of this group
     * @param i the index of stroke to return
     * @return the i-th stroke of this group
     */
    public Stroke get(int i)
    {
        return strokes.get(i);
    }
    
    /**
     * returns the number of strokes in this group
     *  @return the number of strokes in this group
     */
    public int size()
    {
        return nStrokes;
    }
    
    /**
     * calls the feature calculation routine associated with the <i>info</i> structure, if any
     *
     * @param http HTMLwriter for diagnostic output
     * @throws Cow
     */
    public void CalculateFeatures(HTMLwriter http) throws Cow
    {
        if (info != null) {
            info.CalculateFeatures(http);
        }
    }
    
    /**
     * clears the list
     */
    public void clear()
    {
        nStrokes = 0;
        strokes.clear();
    }
    
    public boolean add(Stroke o)
    {
        if (strokes.add(o)) {
            nStrokes++;
            return true;
        }
        return false;
    }
    
    public boolean addAll(Collection<? extends Stroke> c)
    {
        throw new UnsupportedOperationException("StrokeGroup::addAll unimplemented");
    }
    
    public boolean contains(Object o)
    {
        return strokes.contains(o);
    }
    
    public boolean containsAll(Collection<?> c)
    {
        throw new UnsupportedOperationException("StrokeGroup::containsAll unimplemented");
    }
    
    public boolean equals(Object o)
    {
        return strokes.equals(o);
    }
    
    public int hashCode()
    {
        return 0;
    }
    
    public boolean isEmpty()
    {
        return strokes.isEmpty();
    }
    
    public Iterator<Stroke> iterator()
    {
        return strokes.iterator();
    }
    
    public boolean remove(Object o)
    {
        if (strokes.remove(o)) {
            nStrokes--;
            return true;
        }
        return false;
    }
    
    public boolean removeAll(Collection<?> c)
    {
        throw new UnsupportedOperationException("StrokeGroup::removeAll unimplemented");
    }
    
    public boolean retainAll(Collection<?> c)
    {
        throw new UnsupportedOperationException("StrokeGroup::retainAll unimplemented");
    }
    
    public Object[] toArray()
    {
        return strokes.toArray();
    }
    
    public <Stroke>Stroke[] toArray(Stroke[] a)
    {
        return strokes.toArray(a);
    }
    
    /** the type of this stroke group */
    Type                type;
    /** additional information required and or calculated by this group */
    StrokeGroupInfo     info = null;
    /** the string id of this group */
    String              id = null;
    /** the number of strokes in this group */
    int                 nStrokes = 0;
    /** a list of the strokes in this group */
    LinkedList<Stroke>  strokes = null;
}
